##------ 749 ------##
##------ 838 ------##
##------ 1050 ------##
##------ 918 ------##
##------ 986 ------##
##------ 797 ------##
##------ 923 ------##
##------ 975 ------##
##------ 815 ------##
##------ 1020 ------##
##------ 906 ------##
##------ 901 ------##
##------ 1170 ------##
##------ 912 ------##
##------ 746 ------##
##------ 919 ------##
##------ 718 ------##
##------ 714 ------##
##------ 740 ------##
Nike
Nile
timeNile seq(1871, 1970)
timeNile <- seq(1871, 1970)
timeNile
length(timeNile)
length(Nile)
plot(timeNile, localTrendModel$s.level)
plot(timeNile, localTrendModel$s.level, type = "l", col = "red", lwd = 2)
plot(timeNile, localTrendModel$s.slope, type = "l", col = "red", lwd = 2)
plot(timeNile, localTrendModel$s.level, type = "l", col = "red", lwd = 2, ylab = "Inferred level")
plot(timeNile, localTrendModel$s.slope, type = "l", col = "red", lwd = 2, ylab = "Inferred slope")
ylab = "Inferred slope", xlab = 'year')
plot(timeNile, localTrendModel$s.level, type = "l", col = "red", lwd = 2,
ylab = "Inferred level", xlab = 'year')
plot(timeNile, localTrendModel$s.slope, type = "l", col = "red", lwd = 2,
ylab = "Inferred slope", xlab = 'year')
par(mfrow=c(2,2))
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(localTrendModel$s.level + localTrendModel$s.slope, col = "red", lwd = 2, xlab = 'year')
plot(timeNile, localTrendModel$s.level, type = "l", col = "red", lwd = 2,
ylab = "Inferred level", xlab = 'year')
plot(timeNile, localTrendModel$s.slope, type = "l", col = "red", lwd = 2,
ylab = "Inferred slope", xlab = 'year')
par(mfrow=c(2,2))
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(localTrendModel$s.level + localTrendModel$s.slope, col = "red", lwd = 2, xlab = 'year')
plot(timeNile, Nile - localTrendModel$s.level, type = "l", col = "black", lwd = 2,
ylab = "Residuals", xlab = 'year', main = "Residuals from level model")
plot(timeNile, localTrendModel$s.level, type = "l", col = "red", lwd = 2,
ylab = "Inferred level", xlab = 'year')
plot(timeNile, localTrendModel$s.slope, type = "l", col = "red", lwd = 2,
ylab = "Inferred slope", xlab = 'year')
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
predictions <- predict(localTrendModel$model, n.ahead = 20)
predictions
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(nTraining+1,nTraining + nPreds), predictions, type = "l", lwd = 2, color = "red")
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
plot(Nile, ylab = "Flow of Nile", lwd = 2)
nPreds <- 20
predictions <- predict(localTrendModel$model, n.ahead = nPreds)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(nTraining+1,nTraining + nPreds), predictions, type = "l", lwd = 2, color = "red")
lines(seq(nTraining+1,nTraining + nPreds), predictions, type = "l", lwd = 2, col = "red")
predictions <- predict(localTrendModel$model, n.ahead = nPreds)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(nTraining+1,nTraining + nPreds), predictions, type = "l", lwd = 2, col = "red")
seq(nTraining+1,nTraining + nPreds)
plot(seq(nTraining+1,nTraining + nPreds), predictions, type = "l", lwd = 2, col = "red")
predictions
predictions <- predict(localLevelModel$model, n.ahead = nPreds)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
plot(seq(nTraining+1,nTraining + nPreds), predictions, type = "l", lwd = 2, col = "red")
localLevelModel
localLevelModel$vs.level
localLevelModel$s.level
nPreds <- 20
predictions <- predict(localLevelModel$model, n.ahead = nPreds)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(nTraining+1,nTraining + nPreds), predictions, type = "l", lwd = 2, col = "red")
lines(seq(1,nTraining + nPreds), c(Nile,predictions), type = "l", lwd = 2, col = "red")
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(1,nTraining + nPreds), c(Nile,predictions), type = "l", lwd = 2, col = "red")
plot(seq(1,nTraining + nPreds), c(Nile,predictions), type = "l", lwd = 2, col = "red")
?plot
?par
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year', xlim = c(1,nTraining+nPreds))
predictions <- predict(localLevelModel$model, n.ahead = nPreds)
nPreds <- 20
predictions <- predict(localLevelModel$model, n.ahead = nPreds)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year', xlim = c(1,nTraining+nPreds))
c(1,nTraining+nPreds)
lines(seq(1,nTraining + nPreds), c(Nile,predictions), type = "l", lwd = 2, col = "red")
nPreds <- 20
predictions <- predict(localLevelModel$model, n.ahead = nPreds)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year', xlim = c(1,nTraining+nPreds))
lines(seq(1,nTraining + nPreds), c(Nile,predictions), type = "l", lwd = 2, col = "red")
lines(seq(1,nTraining), Nile, type = "l", lwd = 2, col = "black")
nPreds <- 20
predictions <- predict(localTrendModel$model, n.ahead = nPreds)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year', xlim = c(1,nTraining+nPreds))
lines(seq(1,nTraining + nPreds), c(Nile,predictions), type = "l", lwd = 2, col = "red")
lines(seq(1,nTraining), Nile, type = "l", lwd = 2, col = "black")
nPreds <- 20
predictions <- predict(localTrendModel$model, n.ahead = nPreds)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Predictions from local trend model")
lines(seq(1,nTraining + nPreds), c(Nile,predictions), type = "l", lwd = 2, col = "red")
lines(seq(1,nTraining), Nile, type = "l", lwd = 2, col = "black")
nPreds <- 20
predictions <- predict(localLevelModel$model, n.ahead = nPreds)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Predictions from local trend model")
lines(seq(1,nTraining + nPreds), c(Nile,predictions), type = "l", lwd = 2, col = "red")
lines(seq(1,nTraining), Nile, type = "l", lwd = 2, col = "black")
# Make predictions from local trend model
nPreds <- 20
predictions <- predict(localTrendModel$model, n.ahead = nPreds)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Predictions from local trend model")
lines(seq(1,nTraining + nPreds), c(Nile,predictions), type = "l", lwd = 2, col = "red")
lines(seq(1,nTraining), Nile, type = "l", lwd = 2, col = "black")
par(mfrow=c(2,2))
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(localTrendModel$s.level + localTrendModel$s.slope, col = "red", lwd = 2, xlab = 'year')
plot(timeNile, Nile - localTrendModel$s.level, type = "l", col = "black", lwd = 2,
ylab = "Residuals", xlab = 'year', main = "Residuals from level model")
plot(timeNile, localTrendModel$s.level, type = "l", col = "red", lwd = 2,
ylab = "Inferred level", xlab = 'year')
plot(timeNile, localTrendModel$s.slope, type = "l", col = "red", lwd = 2,
ylab = "Inferred slope", xlab = 'year')
plot(timeNile, Nile - localTrendModel$s.level, type = "l", col = "black", lwd = 2,
ylab = "Residuals", xlab = 'year', main = "Residuals from level model")
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(localTrendModel$s.level + localTrendModel$s.slope, col = "red", lwd = 2, xlab = 'year')
plot(timeNile, Nile - localTrendModel$s.level, type = "l", col = "black", lwd = 2,
ylab = "Residuals", xlab = 'year', main = "Residuals from level model")
plot(timeNile, localTrendModel$s.level, type = "l", col = "red", lwd = 2,
ylab = "Inferred level", xlab = 'year')
plot(timeNile, localTrendModel$s.slope, type = "l", col = "red", lwd = 2,
ylab = "Inferred slope", xlab = 'year')
plot(timeNile, localTrendModel$s.level, type = "l", col = "red", lwd = 2,
main = "Inferred level", xlab = 'year', ylab = "")
plot(timeNile, localTrendModel$s.slope, type = "l", col = "red", lwd = 2,
main = "Inferred slope", xlab = 'year', ylab = "")
plot(timeNile, Nile - localTrendModel$s.level, type = "l", col = "black", lwd = 2,
ylab = "Residuals", xlab = 'year', main = "Residuals from level model")
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(localTrendModel$s.level + localTrendModel$s.slope, col = "red", lwd = 2, xlab = 'year')
localLevelModel <- ucm(formula = Nile~0, data = Nile, level = TRUE)
localLevelModel
lines(localLevelModel$s.level, col = "red", lwd = 2)
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
plot(Nile, ylab = "Flow of Nile", lwd = 2)
#### Fitting a local level model ###
# y(t)  = mu(t) + eps(t)   [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + nu(t)  [sigma2_nu is the Level_Variance in rucm]
localLevelModel <- ucm(formula = Nile~0, data = Nile, level = TRUE)
localLevelModel
lines(localLevelModel$s.level, col = "red", lwd = 2)
legend("topright", legend = c("Observed flow","S_level"), col = c("black","blue"), lty = 1)
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
plot(Nile, ylab = "Flow of Nile", lwd = 2)
#### Fitting a local level model ###
# y(t)  = mu(t) + eps(t)   [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + nu(t)  [sigma2_nu is the Level_Variance in rucm]
localLevelModel <- ucm(formula = Nile~0, data = Nile, level = TRUE)
localLevelModel
lines(localLevelModel$s.level, col = "red", lwd = 2)
#### Fitting a local trend model ###
# y(t)  = mu(t) + eps(t)           [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + beta_t + nu(t) [sigma2_nu is the Level_Variance in rucm]
# beta(t) = beta(t-1) + eta(t)     [sigma2_eta is the Slope_Variance in rucm]
localTrendModel <- ucm(formula = Nile~0, data = Nile, level = TRUE, slope = TRUE)
# Adding the fit from the local trend model
#plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(localTrendModel$s.level + localTrendModel$s.slope, col = "blue", lwd = 2, xlab = 'year')
legend("topright", legend = c("Data","Fit local level", "Fit local trend"), col = c("black","red","blue"), lty = 1, lwd = 2)
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Predictions from local trend model")
plot(Nile, ylab = "Flow of Nile", lwd = 2)
lines(Nile, lwd = 2)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Predictions from local trend model")
lines(Nile, lwd = 2)
lines(seq(1,nTraining), Nile, lwd = 2)
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
lines(seq(1,nTraining), Nile, lwd = 2)
localLevelModel <- ucm(formula = Nile~0, data = Nile, level = TRUE)
localLevelModel
lines(seq(1,nTraining), localLevelModel$s.level, col = "red", lwd = 2)
lines(seq(1,nTraining), localTrendModel$s.level + localTrendModel$s.slope, col = "blue", lwd = 2, xlab = 'year')
lines(seq(nTraining + 1,nTraining + nPreds), predictions, type = "l", lwd = 2, col = "red")
predsLocalTrend <- predict(localTrendModel$model, n.ahead = nPreds)
lines(seq(nTraining + 1,nTraining + nPreds), predsTrendLevel,
type = "l", lwd = 2, col = "blue", lty = 2)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalTrend,
type = "l", lwd = 2, col = "blue", lty = 2)
predsLocalLevel <- predict(localLevelModel$model, n.ahead = nPreds)
predsLocalTrend <- predict(localTrendModel$model, n.ahead = nPreds)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalLevel,
type = "l", lwd = 2, col = "red", lty = 2)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalTrend,
type = "l", lwd = 2, col = "blue", lty = 2)
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
lines(seq(1,nTraining), Nile, lwd = 2)
#### Fitting a local level model ###
# y(t)  = mu(t) + eps(t)   [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + nu(t)  [sigma2_nu is the Level_Variance in rucm]
localLevelModel <- ucm(formula = Nile~0, data = Nile, level = TRUE)
localLevelModel
lines(seq(1,nTraining), localLevelModel$s.level, col = "red", lwd = 2)
#### Fitting a local trend model ###
# y(t)  = mu(t) + eps(t)           [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + beta_t + nu(t) [sigma2_nu is the Level_Variance in rucm]
# beta(t) = beta(t-1) + eta(t)     [sigma2_eta is the Slope_Variance in rucm]
localTrendModel <- ucm(formula = Nile~0, data = Nile, level = TRUE, slope = TRUE)
# Adding the fit from the local trend model
#plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(1,nTraining), localTrendModel$s.level + localTrendModel$s.slope, col = "blue", lwd = 2, xlab = 'year')
legend("topright", legend = c("Data","Fit local level", "Fit local trend"), col = c("black","red","blue"), lty = 1, lwd = 2)
# Make predictions from local level model
predsLocalLevel <- predict(localLevelModel$model, n.ahead = nPreds)
predsLocalTrend <- predict(localTrendModel$model, n.ahead = nPreds)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalLevel,
type = "l", lwd = 2, col = "red", lty = 2)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalTrend,
type = "l", lwd = 2, col = "blue", lty = 2)
predsLocalLevel
# The Nile dataset in is the datasets package
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
lines(seq(1,nTraining), Nile, lwd = 2)
#### Fitting a local level model ###
# y(t)  = mu(t) + eps(t)   [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + nu(t)  [sigma2_nu is the Level_Variance in rucm]
localLevelModel <- ucm(formula = Nile~0, data = Nile, level = TRUE)
localLevelModel
lines(seq(1,nTraining), localLevelModel$s.level, col = "red", lwd = 2)
#### Fitting a local trend model ###
# y(t)  = mu(t) + eps(t)           [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + beta_t + nu(t) [sigma2_nu is the Level_Variance in rucm]
# beta(t) = beta(t-1) + eta(t)     [sigma2_eta is the Slope_Variance in rucm]
localTrendModel <- ucm(formula = Nile~0, data = Nile, level = TRUE, slope = TRUE)
# Adding the fit from the local trend model
#plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(1,nTraining), localTrendModel$s.level + localTrendModel$s.slope, col = "blue", lwd = 2, xlab = 'year')
legend("topright", legend = c("Data","Fit local level", "Fit local trend"), col = c("black","red","blue"), lty = 1, lwd = 2)
# Make predictions from local level model
predsLocalLevel <- predict(localLevelModel$model, n.ahead = nPreds, type = "sdtype")
function (arg, choices, several.ok = FALSE)
predsLocalLevel <- predict(localLevelModel$model, n.ahead = nPreds)
predsLocalTrend <- predict(localTrendModel$model, n.ahead = nPreds)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalLevel,
type = "l", lwd = 2, col = "red", lty = 2)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalTrend,
type = "l", lwd = 2, col = "blue", lty = 2)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
lines(seq(1,nTraining), Nile, lwd = 2)
#### Fitting a local level model ###
# y(t)  = mu(t) + eps(t)   [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + nu(t)  [sigma2_nu is the Level_Variance in rucm]
localLevelModel <- ucm(formula = Nile~0, data = Nile, level = TRUE)
localLevelModel
lines(seq(1,nTraining), localLevelModel$s.level, col = "red", lwd = 2)
#### Fitting a local trend model ###
# y(t)  = mu(t) + eps(t)           [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + beta_t + nu(t) [sigma2_nu is the Level_Variance in rucm]
# beta(t) = beta(t-1) + eta(t)     [sigma2_eta is the Slope_Variance in rucm]
localTrendModel <- ucm(formula = Nile~0, data = Nile, level = TRUE, slope = TRUE)
# Adding the fit from the local trend model
#plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(1,nTraining), localTrendModel$s.level + localTrendModel$s.slope, col = "blue", lwd = 2, xlab = 'year')
# Make predictions from local level model
predsLocalLevel <- predict(localLevelModel$model, n.ahead = nPreds)
predsLocalTrend <- predict(localTrendModel$model, n.ahead = nPreds)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalLevel,
type = "l", lwd = 2, col = "red", lty = 2)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalTrend,
type = "l", lwd = 2, col = "blue", lty = 2)
# Plotting the level and trend components separately.
plot(timeNile, localTrendModel$s.level, type = "l", col = "red", lwd = 2,
main = "Inferred level", xlab = 'year', ylab = "")
plot(timeNile, localTrendModel$s.slope, type = "l", col = "red", lwd = 2,
main = "Inferred slope", xlab = 'year', ylab = "")
legend("topright", legend = c("Data","Fit local level", "Fit local trend",
"Predictions local level","Predictions local trend"),
col = c("black","red","blue","red","blue"), lty = c(1,1,1,2,2), lwd = 2)
legend("topright", legend = c("Data","Fit local level", "Fit local trend",
"Predictions local level","Predictions local trend"),
col = c("black","red","blue","red","blue"), lty = c(1,1,1,2,2), lwd = 2, cex = 2)
legend("topright", legend = c("Data","Fit local level", "Fit local trend",
"Predictions local level","Predictions local trend"),
col = c("black","red","blue","red","blue"), lty = c(1,1,1,2,2), lwd = 2, cex = 0.2)
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
lines(seq(1,nTraining), Nile, lwd = 2)
#### Fitting a local level model ###
# y(t)  = mu(t) + eps(t)   [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + nu(t)  [sigma2_nu is the Level_Variance in rucm]
localLevelModel <- ucm(formula = Nile~0, data = Nile, level = TRUE)
localLevelModel
lines(seq(1,nTraining), localLevelModel$s.level, col = "red", lwd = 2)
#### Fitting a local trend model ###
# y(t)  = mu(t) + eps(t)           [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + beta_t + nu(t) [sigma2_nu is the Level_Variance in rucm]
# beta(t) = beta(t-1) + eta(t)     [sigma2_eta is the Slope_Variance in rucm]
localTrendModel <- ucm(formula = Nile~0, data = Nile, level = TRUE, slope = TRUE)
# Adding the fit from the local trend model
#plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(1,nTraining), localTrendModel$s.level + localTrendModel$s.slope, col = "blue", lwd = 2, xlab = 'year')
# Make predictions from local level model
predsLocalLevel <- predict(localLevelModel$model, n.ahead = nPreds)
predsLocalTrend <- predict(localTrendModel$model, n.ahead = nPreds)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalLevel,
type = "l", lwd = 2, col = "red", lty = 2)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalTrend,
type = "l", lwd = 2, col = "blue", lty = 2)
legend("topright", legend = c("Data","Fit local level", "Fit local trend",
"Predictions local level","Predictions local trend"),
col = c("black","red","blue","red","blue"), lty = c(1,1,1,2,2), lwd = 2, cex = 0.2)
legend("topright", legend = c("Data","Fit local level", "Fit local trend",
"Predictions local level","Predictions local trend"),
col = c("black","red","blue","red","blue"), lty = c(1,1,1,2,2), lwd = 2, cex = 0.5)
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow", cex = 0.5)
lines(seq(1,nTraining), Nile, lwd = 2)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow", cex.main = 0.5)
lines(seq(1,nTraining), Nile, lwd = 2)
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow", cex.main = 0.8)
lines(seq(1,nTraining), Nile, lwd = 2)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow", cex.main = 0.8, cex.xlab = 0.8)
lines(seq(1,nTraining), Nile, lwd = 2)
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow", cex.main = 0.8, cex.lab = 0.8)
lines(seq(1,nTraining), Nile, lwd = 2)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow",
cex.axis = 0.8, cex.main = 0.8, cex.lab = 0.8)
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow",
cex.axis = 0.8, cex.main = 0.8, cex.lab = 0.8)
lines(seq(1,nTraining), Nile, lwd = 2)
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow",
cex.axis = 0.8, cex.main = 0.8, cex.lab = 0.8)
lines(seq(1,nTraining), Nile, lwd = 2, cex.axis = 0.8, cex.main = 0.8, cex.lab = 0.8)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow", cex.main = 0.8)
lines(seq(1,nTraining), Nile, lwd = 2, cex.axis = 0.5)
nPreds <- 20
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow", cex.main = 0.8,  cex.axis = 0.5)
lines(seq(1,nTraining), Nile, lwd = 2, cex.axis = 0.5)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
par(cex.axis = 0.5)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow", cex.main = 0.8)
par(cex.axis = 0.5, cex.main = 0.8)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
lines(seq(1,nTraining), Nile, lwd = 2)
par(cex.axis = 0.5, cex.main = 0.8, cex.lab = 0.7)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
lines(seq(1,nTraining), Nile, lwd = 2)
par(cex.axis = 0.8, cex.main = 0.8, cex.lab = 0.8)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
lines(seq(1,nTraining), Nile, lwd = 2)
#### Fitting a local level model ###
# y(t)  = mu(t) + eps(t)   [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + nu(t)  [sigma2_nu is the Level_Variance in rucm]
localLevelModel <- ucm(formula = Nile~0, data = Nile, level = TRUE)
localLevelModel
lines(seq(1,nTraining), localLevelModel$s.level, col = "red", lwd = 2)
#### Fitting a local trend model ###
# y(t)  = mu(t) + eps(t)           [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + beta_t + nu(t) [sigma2_nu is the Level_Variance in rucm]
# beta(t) = beta(t-1) + eta(t)     [sigma2_eta is the Slope_Variance in rucm]
localTrendModel <- ucm(formula = Nile~0, data = Nile, level = TRUE, slope = TRUE)
# Adding the fit from the local trend model
#plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(1,nTraining), localTrendModel$s.level + localTrendModel$s.slope, col = "blue", lwd = 2, xlab = 'year')
# Make predictions from local level model
predsLocalLevel <- predict(localLevelModel$model, n.ahead = nPreds)
predsLocalTrend <- predict(localTrendModel$model, n.ahead = nPreds)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalLevel,
type = "l", lwd = 2, col = "red", lty = 2)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalTrend,
type = "l", lwd = 2, col = "blue", lty = 2)
legend("topright", legend = c("Data","Fit local level", "Fit local trend",
"Predictions local level","Predictions local trend"),
col = c("black","red","blue","red","blue"), lty = c(1,1,1,2,2), lwd = 2, cex = 0.5)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalLevel,
type = "l", lwd = 2, col = "red", lty = 2)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalTrend,
type = "l", lwd = 2, col = "blue", lty = 2)
legend("topright", legend = c("Data","Fit local level", "Fit local trend",
"Predictions local level","Predictions local trend"),
col = c("black","red","blue","red","blue"), lty = c(1,1,1,2,2), lwd = 2, cex = 0.45)
#install.packages('rucm')
library(rucm)
# Plotting the data
# The Nile dataset in is the datasets package
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
par(cex.axis = 0.8, cex.main = 0.8, cex.lab = 0.8)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
lines(seq(1,nTraining), Nile, lwd = 2)
#### Fitting a local level model ###
# y(t)  = mu(t) + eps(t)   [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + nu(t)  [sigma2_nu is the Level_Variance in rucm]
localLevelModel <- ucm(formula = Nile~0, data = Nile, level = TRUE)
localLevelModel
lines(seq(1,nTraining), localLevelModel$s.level, col = "red", lwd = 2)
#### Fitting a local trend model ###
# y(t)  = mu(t) + eps(t)           [sigma2_eps is the Irregular_Variance in rucm]
# mu(t) = mu(t-1) + beta_t + nu(t) [sigma2_nu is the Level_Variance in rucm]
# beta(t) = beta(t-1) + eta(t)     [sigma2_eta is the Slope_Variance in rucm]
localTrendModel <- ucm(formula = Nile~0, data = Nile, level = TRUE, slope = TRUE)
# Adding the fit from the local trend model
#plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year')
lines(seq(1,nTraining), localTrendModel$s.level + localTrendModel$s.slope, col = "blue", lwd = 2, xlab = 'year')
# Make predictions from local level model
predsLocalLevel <- predict(localLevelModel$model, n.ahead = nPreds)
predsLocalTrend <- predict(localTrendModel$model, n.ahead = nPreds)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalLevel,
type = "l", lwd = 2, col = "red", lty = 2)
lines(seq(nTraining + 1,nTraining + nPreds), predsLocalTrend,
type = "l", lwd = 2, col = "blue", lty = 2)
legend("topright", legend = c("Data","Fit local level", "Fit local trend",
"Predictions local level","Predictions local trend"),
col = c("black","red","blue","red","blue"), lty = c(1,1,1,2,2), lwd = 2, cex = 0.45)
matrix(c(1,0,1,1),nr=2),
matrix(c(1,0,1,1),2),
matrix(c(1,0,1,1),2)
matrix(c(1,0,1,1),2),
matrix(c(1,0,1,1),nr=2)
library(glm)
install.packages("dlm")
library(dlm)
?dlmFilter
library(dlm)
# Plotting the data
# The Nile dataset in is the datasets package
timeNile <- seq(1871, 1970)
nTraining <- length(timeNile) # Total number of data points
nPreds <- 20
par(cex.axis = 0.8, cex.main = 0.8, cex.lab = 0.8)
plot(Nile, ylab = "Flow of Nile", lwd = 2, xlab = 'year',
xlim = c(1,nTraining+nPreds), main = "Modeling the Nile flow")
lines(seq(1,nTraining), Nile, lwd = 2)
?dlm
GG = matrix(c(1,1,0,1), byrow = T)
G
GG
GG = matrix(c(1,1,0,1), 2, 2, byrow = T)
GG
dlmLocalTrend <- dlm(m0 = m0,C0 = C0, FF = FF, GG = GG, V = V, W = W)
m0 = c(0,0)     # Prior mean for the first state theta_0
C0 = 10*diag(2) # Prior covariance for the first state theta_0
FF = C(1,0)     # The mapping from the states to the measurements
function (object, contr, how.many, ...)
{
''
''
