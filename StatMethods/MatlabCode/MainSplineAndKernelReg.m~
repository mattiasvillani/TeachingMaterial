%%%%%% BEGIN USER INPUT %%%%%%
DataFileName = 'LidarData.mat'; % This is the name of the .mat file that holds the data
                                % y, X, XName (cell), yName (string)
model = 'Spline';               % Choices: 'Spline' or 'Kernel'
lambda = 1;                   % Shrinkage (Splines) or kernel bandwidth (old b, kernel regression)
splineType = 'PolyTrunc';       % Choices: 'PolyTrunc'
kernelType = 'Epanechnikov';    % Choices: 'Uniform','Gaussian' or 'Epanechnikov' 
p = [1 2 3 4];                          % Order of the polynomial. For splines this is only relevant when splineType='polyTrunc'
nKnots = 24;                    % Number of knots
standardizeX = 1;               % If standardizeX=1, covariates are standardize to have mean zero and unit variance.
nGridPoints = 100;              % The number of grid points (in X-space) where the fit is evaluated. nGridPoints = nan evaluates at all the points in the data.
plotFit = 1;                    % If plotFit=0, no plots are produced.
crossValidate = 1;              % If =1, then cross-validation of lambda
%%%%%   END USER INPUT  %%%%%%

% Loading the data from file DataFileName.mat
load(DataFileName,'y','X','XName','yName')
x = X(:,1); % Change here and the next line if some other column of X is the predictor
xName = XName{1};

if strcmpi(model,'Spline')
    modelType = splineType;
    FigHandle = figure('name',['Nonparametric spline regression for the ',DataFileName,' data']);
else
    modelType = kernelType;
    FigHandle = figure('name',['Nonparametric kernel regression for the ',DataFileName,' data']);
end
if crossValidate
    figHandleCV = figure('name','Cross-validation of \lambda');
end

[changedVariable,Values] = ChangedVarSettings(lambda,nKnots,p,modelType); % Function that figures out which 
                                                                          % parameter you want to vary
nSettings = length(Values);
[nRows,nCols] = ConstructOptimalSubplot(nSettings); % Trivial function that finds out the best way to organize the plots.
dfFits = zeros(nSettings,1);

% Looping over the settings
for i = 1:nSettings
    
    % Changing a setting/parameter of the model
    if ~isnan(changedVariable)
        changeStr = [changedVariable,'=',num2str(Values(i))]; % Building up a string (letter) with the changed setting
        fprintf(1,changeStr) % Print the changed setting to the screen
        eval(changeStr); % Here we actaully change the setting
    end
    % Plotting the data
    if plotFit
        figure(FigHandle)
        subplot(nRows,nCols,i)
        plot(x,y,'k.')
        hold on
        xlabel(xName)
        ylabel(yName)
    end
    if strcmpi(model,'Kernel')
        % Estimate a polynomial kernel regression model of order p
        [fittedVals,xGrid,kernelOnGrid] = KernelReg(y,x,lambda,p,modelType,standardizeX,nGridPoints); % Note the bandwidth b = lambda
    else
        % Estimate a spline regression model of order p
        [fittedVals,xGrid,knots,dfFit,Slambda] = SplineReg(y,x,lambda,p,nKnots,modelType,standardizeX,nGridPoints);
        dfFits(i) = dfFit;
    end
    
    if plotFit
        plot(xGrid,fittedVals,'r','linewidth',2) % Plotting E(y|x)
        
        % Adding marks for the knot locations
        if strcmpi(model,'Spline')
            AddHashMarks(FigHandle,knots) % Adding the rug plot with knot locations
            title(['PolyOrder = ', int2str(p),'. nKnots =  ',int2str(nKnots), '. \lambda = ',num2str(lambda,3), '. df = ',num2str(dfFit,2)])
            % DF = SmoothingMatPlot(Slambda,x); %% Plotting the smoother matrix, L.
        else
            title(['PolyOrder = ', int2str(p),'. nKnots =  ',int2str(nKnots), '. \lambda = ',num2str(lambda,3)])
        end
        
        if i==1
            legend('Data','Estimated E(y|x)')
        end
        axis tight
        box off
    end
    
    if crossValidate
        figure(figHandleCV)
        subplot(nRows,nCols,i)
        if standardizeX
            lambdas = linspace(0,3,100);
        else
            lambdas = linspace(0,max(x),100);
        end
        [lambdaOptCV, lambdaOptGCV] = CVLinearSmootherMany(y,x,p,nKnots,modelType,standardizeX,lambdas);
        plot(lambdas',CV),set(gca,'xscale','log')
        hold on
        plot(lambdas',GCV,'r--')
        line([lambdaOptCV lambdaOptCV],get(gca,'ylim'));
        lineHandle = line([lambdaOptGCV lambdaOptGCV],get(gca,'ylim'));
        set(lineHandle,'linestyle','--','color','r')
        set(gca,'xscale','log')
        xlabel('lambda (log scale)')
        ylabel('CV/GCV')
        if strcmpi(model,'Spline')
            title(['PolyOrder = ', int2str(p),'. nKnots =  ',int2str(nKnots), '. df = ',num2str(dfFit,2)])
        else
            title(['PolyOrder = ', int2str(p),'. nKnots =  ',int2str(nKnots)])
        end
    end
end



