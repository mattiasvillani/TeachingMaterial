# Author: Mattias Villani, Sveriges Riksbank and Stockholm University. 
#         E-mail: mattias.villani@riksbank.se

# Script to illustrate numerical maximization of the logistics regression
# install.packages("mvtnorm") # Loading a package that contains the multivariate normal pdf
library("mvtnorm") # This command reads the mvtnorm package into R's memory. NOW we can use dmvnorm function.

# Loading data from file
Data<-read.table("SpamReduced.dat",header=TRUE)  # Spam data from Hastie et al.
y <- as.vector(Data[,1]);
X <- as.matrix(Data[,2:17]);
nPara <- dim(X)[2];
covNames <- names(Data)[2:length(names(Data))];

# Setting up the prior
mu <- as.vector(rep(0,nPara)) # Prior mean vector
tau <- 1; # Prior scaling factor such that Prior Covariance = (tau^2)*I
Sigma <- tau^2*diag(nPara);

# Defining the function that returns the log posterior. Note that the first input argument of this
# function must be the one that we optimize on, i.e. the regression coefficients.
logPost <- function(betaVect,y,X,mu,Sigma){
  nPara <- length(betaVect);
  linPred <- X%*%betaVect;
                                      
  logLik <- sum( linPred*y -log(1 + exp(linPred)));
  logPrior <- dmvnorm(betaVect, mu, Sigma, log=TRUE);
  return(logLik + logPrior)
}

# Calling the optimization routine Optim. Note the auxilliary arguments that are passed to the function logPost
# Note how I pass all other arguments of the function logPost (i.e. all arguments except betaVect which is the one that we are trying to optimize over) to the R optimizer.
# The argument control is a list of options to the optimizer. Here I am telling the optimizer to multiply the objective function (i.e. logPost) by -1. This is because
# Optim finds a minimum, and I want to find a maximum. By reversing the sign of logPost I can use Optim for my maximization problem.
initVal <- as.vector(solve(crossprod(X,X))%*%t(X)%*%y); # Initial values by OLS
OptimResults<-optim(initVal,logPost,gr=NULL,y,X,mu,Sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)

# Printing the results to the screen
names(OptimResults$par) <- covNames # Naming the coefficient by covariates
approxPostStd <- sqrt(diag(-solve(OptimResults$hessian))) # Computing approximate standard deviations.
names(approxPostStd) <- covNames # Naming the coefficient by covariates
print('The posterior mode is:')
print(OptimResults$par)
print('The approximate posterior standard deviation is:')
approxPostStd <- sqrt(diag(-solve(OptimResults$hessian)))
print(approxPostStd)
